const UserRegisterController = (app, db) => {
  // Helper function to run SQL queries using db.query
  const query = async (sql, params) => {
    try {
      const [results, fields] = await db.query(sql, params);
      return results;
    } catch (error) {
      throw error;
    }
  };

  // Endpoint for user registration
  app.post("/register/user", async (req, res) => {
    try {
      const {
        userFullName,
        userEmail,
        userUserName,
        userPassword,
        userType
      } = req.body;

      // Check if user username already exists
      const existingUser = await query('SELECT * FROM user_login WHERE userUserName = ?', [userUserName]);

      if (existingUser.length > 0) {
        return res.status(400).json({ success: false, message: "Username already exists" });
      }

      // Start a new transaction for each registration
      const connection = await db.getConnection();

      try {
        await connection.beginTransaction();

        // Insert user details
        const [userDetailsResult] = await connection.query(
          'INSERT INTO user_details (userFullName, userEmail, userType) VALUES (?, ?, ?)',
          [userFullName, userEmail, userType]
        );

        // Retrieve the user ID generated by the database
        const userId = userDetailsResult.insertId;

        // Ensure that userId is a valid non-null value before inserting into user_login
        if (!userId || userId <= 0) {
          console.error('Invalid user ID during registration:', userId);
          throw new Error('Invalid user ID');
        }

        // Insert user login details
        await connection.query(
          'INSERT INTO user_login (user_id, userUserName, userPassword) VALUES (?, ?, ?)',
          [userId, userUserName, userPassword]
        );

        // Commit the transaction
        await connection.commit();

        // Registration successful
        console.log("User Registered Successfully");
        res.status(201).json({ success: true, message: "User Registration Successful!" });
      } catch (err) {
        // Rollback the transaction in case of an error
        await connection.rollback();
        throw err;
      } finally {
        // Release the connection
        connection.release();
      }
    } catch (error) {
      console.error("Error during user registration:", error);
      res.status(500).json({ success: false, error: "Internal Server Error" });
    }
  });
};

module.exports = UserRegisterController;
